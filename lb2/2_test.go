package lb2

import (
	"math/big"
	"testing"
)



func TestTask2Lab2(t *testing.T) {
  test_1, _ := new(big.Int).SetString("88523570369346801684435811372718127585670061114702144933569245260093253728999880981421881473709365496343", 10)
  test_2, _ := new(big.Int).SetString("64", 10)
  test_3, _ := new(big.Int).SetString("15706522056181621090770258894088721333517446109686260491482044278464216648315140689697000572638344199807101711959834456171802371640652782074942700028435136322763901066641563608090047198294787866815196171715424781021982056945759953360598309339977630025605883035130608060886406432151345862595803954621807519051808168904254991012774356413269313085450626325490957267975194686005361084995763812154973195143841374833165494389576978932052328057721950341134856785093783214750343599479645360625229918258733091707418456741817092694744544486924811386222596089853732967118748329662574831182769583202879655480111145804224357017410115712930655616252587308387257655522664499410025540735746982106799327692842705261325833637718463008501293702069932403214750727740810954539355662650827881750183316333878972977379174396688260231262009876496772160988520563541910532634861600224349311644556638506708691069706660713811039941613211013138818558862200086228052507984953271623501940166526780409888519736922612880000226289415212165169746372151885114049535147864281625027034420470863810631273737696666699061265890554621739088041021315891671861157699590278038260580226108223828622098980095135746148748094630322639914856434114893274069608920999231622189451203223671785890493849472656909481460308434718775500089725955457771792138464896553079041202875224971146699457659331223933506999216347116588730583072971202705315389758222127777410940167986128685385722335933767907701563102720683071390197617116456922715441862324715471796313899201310479652612525338658570065198568477632563023019660059637293150358845098455767860732918546717082489552171356800918360951561506812527206746706616981829748628660247677182281998351822561200001", 10)

  test_4, _ := new(big.Int).SetString("3567799721746795081691605389592742226754535577048819314995530046859263988215080225891815113171819488288760588133727642784107723927979142389593041183249975892492943408063078171911574271768168529135606395753518181575916200073450795116058845102382207751796058206947424430919677112792286262859826870107513152054170900655557323190432151079315924958868181173189468445721512769791073924307045264961820136851970621732838552276911445901061777283955882963847630577299785871063521439324350676987448482738899714191888071283342337651313583866691397329258487635739054042935247373025007718742097878924375953558015391689335891651439918962190383361049120525810032092687369657836407910504615305541816920293985705080663100405316544684285133257354953201144444956956491527738652961192284997102784416049883861194015749945999779159872498555173222420033276817471550853248687144103041835230562510957308927848108540481287457675510864546634217761729657920202428663531061216980178207649819537364399047844262925253834392699468892157141469768797056558375623345132031002659346129446663756353458919644293242751056526286530270607980663998275853241217165364669519185809361612274158205283843726229535853750891835215478557073330689868262768705083123652101786566560922892590587718245386266819368859244980447324335321759136926371241315081489052477740132408363589520852310756902231982087747819592252144638423453979656317452093921304781058640237018080028186833215203776125496193833685314583924032821109446192247462154100728293557632895440549779161966476440878339991769597977299177390183035116503287539678220533271931614267942486135228786196275576702162822609400820988884648176622092472481780177271711390809623988413798755768314783540972702859663548808424743414435933427510914586940803750596327583519008407674543045111110752418793572025860317758588727515533824866463811451775625601518329802843858098702363674522559957106300850328915428542655047281276662108553376182441752776664746528266678729823999775995375024036806675651954006120618963092966304380722684253690566363275392829034431841637825845177552985753158221820616151372260861787946128994695104870053524171619455940133679681345974045839428136185283629801455912529393618147033798453860444046825696403880768706608578403683564212189657098110451883038602283539365944521217889825820113411551203037589566999086996774321131408931136104777232139217664895361945404897595513626221165838634206073651508917385720174227603697699073129507086285725885001493735393153919347421384543026108165666821652028806691893100327207253311535312504706058797763735341445008811406807963096038157648385847902324678661412205161756342668796117066935532352970969436851983293986750541824734414479253148831111118869731282652779919713477294300297699480275629188602326372936316648471525596202950957995989897483102600235188247423766040416862716212155221226982203013574818404820211190319389176011786756844450005222304379216921811173973051565191337211114238383644049520744491395125659751846071574330570484394481766802098142103719058229965441061979046123049377434329560730779539559913665404052702945347787181346131889038784276287304114070549283335433696488409859892207666205344790007865743503077829580780081458062666813347013805217293717068175911389418813671606025346079091573547138260256236315203302733515022624367365799306950545679290020520006969513541993173895936489294564164069903676513858404463058881050117705635368368049801427406127900017861544108455249646371418901814256142101808775624692818987753030147276236300105145415388304484509087039460208112839528859092398413849452959914249684769127383164348708053744579016349097373636588910701144851727142510226669533585295804276685276255057717841311168529404985717358366372229004316677217650512530960383537480529671312849309279860330915130105310192640645936169395330567114443771450477876865898546985737452064000912041849391165602355999834419391103925609185274760170430754893686178666600837960801503492626031349861593561835224450350422148379859328661137456039806750146725564093656605952738802166289146631755134816792277552260557463860514091937371040291018555505609486420486014006487085495999470029966419556578574819880185124926073171469886251170979078469272313562401659444229105738763226991405634763508372664621453227314691899955536813134240177860771931545347581509899793891796029868278091646051746426095355156681797456767373655174913832309176311169139758412824564466623339193216012553727461329857023144968753521869839130521912137788278388117959049251433010082894841138548149355824063715758860059340161656299939844213696039335417535712469582026457895015794286091152596028228929071858939126773356791838608979340218194722816", 10)

  tests := []struct {
    name           string
    number         *big.Int
    power          *big.Int
    expectedResult *big.Int
	}{
		{
			name:   "Test 1",
			number: big.NewInt(7),
			power:  big.NewInt(123),
      expectedResult: test_1,
    },
		{
			name:   "Test 2",
			number: big.NewInt(2),
			power:  big.NewInt(6),
      expectedResult: test_2,
		},
		{
			name:   "Test 3",
			number: big.NewInt(7),
			power:  big.NewInt(2000),
      expectedResult: test_3,
		},
    {
      name:   "Test 4",
      number: big.NewInt(1466),
      power:  big.NewInt(1466),
      expectedResult: test_4,
    },
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := Lab2Task2(test.number, test.power)

			if result.Cmp(test.expectedResult) != 0 {
				t.Errorf("Task8 %v failed", test.name)
			}
		})
	}
}
